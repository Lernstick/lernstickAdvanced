#!/bin/sh

## live-build(7) - System Build Scripts
## Copyright (C) 2006-2013 Daniel Baumann <daniel@debian.org>
##
## This program comes with ABSOLUTELY NO WARRANTY; for details see COPYING.
## This is free software, and you are welcome to redistribute it
## under certain conditions; see COPYING for details.


set -e

# Including common functions
[ -e "${LIVE_BUILD}/scripts/build.sh" ] && . "${LIVE_BUILD}/scripts/build.sh" || . /usr/lib/live/build.sh

# Setting static variables
DESCRIPTION="$(Echo 'build iso binary image')"
HELP=""
USAGE="${PROGRAM} [--force]"

Arguments "${@}"

# Reading configuration files
Read_conffiles config/all config/common config/bootstrap config/chroot config/binary config/source
Set_defaults

case "${LB_BINARY_IMAGES}" in
	iso)
		IMAGE="binary.iso"
		;;

	iso-hybrid)
		IMAGE="binary.hybrid.iso"
		;;

	*)
		exit 0
		;;
esac

Echo_message "Begin building binary iso image..."

# Requiring stage file
Require_stagefile .build/config .build/bootstrap

# Checking stage file
Check_stagefile .build/binary_iso

# Checking lock file
Check_lockfile .lock

# Creating lock file
Create_lockfile .lock

# Checking depends
case "${LB_PARENT_DISTRIBUTION}" in
	squeeze)
		Check_package chroot/usr/bin/genisoimage genisoimage

		if [ "${LB_BINARY_IMAGES}" = "iso-hybrid" ]
		then
			Check_package chroot/usr/bin/isohybrid syslinux
		fi
		;;

	*)
		Check_package chroot/usr/bin/xorriso xorriso

		if [ "${LB_BINARY_IMAGES}" = "iso-hybrid" ]
		then
			Check_package chroot/usr/lib/syslinux/isohdpfx.bin syslinux-common
		fi
		;;
esac

# Restoring cache
Restore_cache cache/packages.binary

# Installing depends
Install_package

# Remove old iso image
if [ -f ${IMAGE} ]
then
	rm -f ${IMAGE}
fi

# Handle xorriso generic options
XORRISO_OPTIONS="-r -J -joliet-long -l -cache-inodes -iso-level 3"

# Handle xorriso live-build specific options
case "${LB_PARENT_DISTRIBUTION}" in
	squeeze)
		;;

	*)
		if [ "${LB_BINARY_IMAGES}" = "iso-hybrid" ]
		then
			XORRISO_OPTIONS="${XORRISO_OPTIONS} -isohybrid-mbr /usr/lib/syslinux/isohdpfx.bin -partition_offset 16"
		fi
		;;
esac

if [ "${_QUIET}" = "true" ]
then
	XORRISO_OPTIONS="${XORRISO_OPTIONS} -quiet"
fi

if [ "${_VERBOSE}" = "true" ]
then
	XORRISO_OPTIONS="${XORRISO_OPTIONS} -v"
fi

if [ -n "${LB_ISO_APPLICATION}" ] && [ "${LB_ISO_APPLICATION}" != "none" ]
then
	XORRISO_OPTIONS="${XORRISO_OPTIONS} -A \"${LB_ISO_APPLICATION}\""
fi

if [ -n "${LB_ISO_PREPARER}" ] && [ "${LB_ISO_PREPARER}" != "none" ]
then
	XORRISO_OPTIONS="${XORRISO_OPTIONS} -p \"${LB_ISO_PREPARER}\""
fi

if [ -n "${LB_ISO_PUBLISHER}" ] && [ "${LB_ISO_PUBLISHER}" != "none" ]
then
	XORRISO_OPTIONS="${XORRISO_OPTIONS} -publisher \"${LB_ISO_PUBLISHER}\""
fi

if [ -n "${LB_ISO_VOLUME}" ] && [ "${LB_ISO_VOLUME}" != "none" ]
then
	XORRISO_OPTIONS="${XORRISO_OPTIONS} -V \"${LB_ISO_VOLUME}\""
fi

# Handle xorriso architecture specific options
case "${LB_BOOTLOADER}" in
	grub)
		XORRISO_OPTIONS="${XORRISO_OPTIONS} -no-emul-boot -boot-load-size 4 -boot-info-table"
		XORRISO_OPTIONS="${XORRISO_OPTIONS} -b boot/grub/stage2_eltorito"
		XORRISO_EXCLUDE="boot/grub/stage2_eltorito"
		;;

	grub2)
		XORRISO_OPTIONS="${XORRISO_OPTIONS} -no-emul-boot -boot-load-size 4 -boot-info-table"
		XORRISO_OPTIONS="${XORRISO_OPTIONS} -b boot/grub/grub_eltorito -J"
		XORRISO_EXCLUDE="boot/grub/grub_eltorito"
		;;

	silo)
		XORRISO_OPTIONS="${XORRISO_OPTIONS} -G boot/isofs.b -B ..."
		XORRISO_EXCLUDE="boot/isofs.b"
		;;

	syslinux)
		case "${LB_MODE}" in
			progress-linux)
				XORRISO_OPTIONS="${XORRISO_OPTIONS} -b boot/boot.bin -c boot/boot.cat"
				XORRISO_EXCLUDE="boot/boot.bin"
				;;

			*)
				XORRISO_OPTIONS="${XORRISO_OPTIONS} -b isolinux/isolinux.bin -c isolinux/boot.cat"
				XORRISO_EXCLUDE="isolinux/isolinux.bin"
				;;
		esac

		XORRISO_OPTIONS="${XORRISO_OPTIONS} -no-emul-boot -boot-load-size 4 -boot-info-table"
		;;

	yaboot)
		XORRISO_OPTIONS="${XORRISO_OPTIONS} --iso-level 2 --netatalk -hfs -probe -map"
		XORRISO_OPTIONS="${XORRISO_OPTIONS} binary/yaboot/hfs.map --chrp-boot -part -no-desktop"
		XORRISO_OPTIONS="${XORRISO_OPTIONS} -hfs-bless binary/yaboot -hfs-volid Debian/Live_powerpc"
		XORRISO_EXCLUDE="yaboot/hfs.map"
		;;

	*)
		Echo_warning "Bootloader on your architecture not yet supported by live-build."
		Echo_warning "This will produce a most likely not bootable image (Continuing in 5 seconds)."
		sleep 5
		;;
esac

#if [ "${LB_DEBIAN_INSTALLER}" != "live" ]
#then
#	XORRISO_OPTIONS="${XORRISO_OPTIONS} -m ${XORRISO_EXCLUDE}"
#fi

if [ "${LB_BOOTLOADER}" = "grub2" ]
then

cat > binary.sh << EOF
#!/bin/sh

input_dir=/usr/lib/grub/i386-pc

# build core.img
core_img=\$(mktemp)
grub-mkimage -d \${input_dir} -o \${core_img} -O i386-pc biosdisk iso9660

# build grub_eltorito image
cat \${input_dir}/cdboot.img \${core_img} > binary/boot/grub/grub_eltorito

rm -f \${core_img}

for file in \${input_dir}/*.mod \${input_dir}/efiemu??.o \
	\${input_dir}/command.lst \${input_dir}/moddep.lst \${input_dir}/fs.lst \
	\${input_dir}/handler.lst \${input_dir}/parttool.lst
do
	if test -f "\$file"
	then
		cp -f "\$file" binary/boot/grub
	fi
done
EOF

else
	echo "#!/bin/sh" > binary.sh
fi

case "${LB_PARENT_DISTRIBUTION}" in
	squeeze)

cat >> binary.sh << EOF
genisoimage ${XORRISO_OPTIONS} -o ${IMAGE} binary
EOF

		if [ "${LB_BINARY_IMAGES}" = "iso-hybrid" ]
		then

cat >> binary.sh << EOF

isohybrid ${IMAGE}
EOF

		fi
		;;

	*)

cat >> binary.sh << EOF

xorriso -as mkisofs ${XORRISO_OPTIONS} -o ${IMAGE} binary
EOF

		;;
esac

case "${LB_BUILD_WITH_CHROOT}" in
	true)
		# Moving image
		mv binary.sh chroot
		mv binary chroot

		Chroot chroot "sh binary.sh"

		# Move image
		mv chroot/binary chroot/${IMAGE} ./
		rm -f chroot/binary.sh
		;;

	false)
		sh binary.sh
		rm -f binary.sh
		;;
esac

# Saving cache
Save_cache cache/packages.binary

# Removing depends
Remove_package

# Creating stage file
Create_stagefile .build/binary_iso
